{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"D:\\\\React Gormmet\\\\react-gormmet\\\\src\\\\component\\\\Login.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { FormField, TextInput, Box, Button, Form, Heading } from 'grommet'; // This example shows a way to perform validation across multiple fields.\n\nexport const ULogin = () => {\n  _s();\n\n  const [value, setValue] = useState({\n    name: 'a',\n    email: 'b'\n  });\n\n  const HandleData = event => {\n    console.log(\"reached\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(Box, {\n    align: \"center\",\n    justify: \"between\",\n    height: \"100vh\",\n    children: /*#__PURE__*/_jsxDEV(Box, {\n      margin: (\"top\", \"25vh\"),\n      align: \"center\",\n      children: [/*#__PURE__*/_jsxDEV(Heading, {\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(Form, {\n        value: value,\n        onChange: nextValue => setValue(nextValue),\n        onSubmit: ({\n          value: nextValue\n        }) => console.log(nextValue),\n        children: [/*#__PURE__*/_jsxDEV(FormField, {\n          label: \"Email\",\n          name: \"email\",\n          required: true,\n          children: /*#__PURE__*/_jsxDEV(TextInput, {\n            name: \"email\",\n            type: \"email\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(FormField, {\n          label: \"Password\",\n          name: \"name\",\n          required: true,\n          children: /*#__PURE__*/_jsxDEV(TextInput, {\n            name: \"name\",\n            type: \"password\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          direction: \"row\",\n          justify: \"between\",\n          margin: {\n            top: 'medium'\n          },\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            type: \"reset\",\n            label: \"Reset\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 39,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            label: \"Update\",\n            primary: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 38,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 10\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 6\n  }, this);\n};\n\n_s(ULogin, \"d22mX01P70B4JJQ5uyDI114Thsk=\");\n\n_c = ULogin;\n\nvar _c;\n\n$RefreshReg$(_c, \"ULogin\");","map":{"version":3,"sources":["D:/React Gormmet/react-gormmet/src/component/Login.js"],"names":["React","useState","FormField","TextInput","Box","Button","Form","Heading","ULogin","value","setValue","name","email","HandleData","event","console","log","nextValue","top"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,SAAT,EAAoBC,SAApB,EAA+BC,GAA/B,EAAoCC,MAApC,EAA4CC,IAA5C,EAAkDC,OAAlD,QAAiE,SAAjE,C,CAOA;;AACA,OAAO,MAAMC,MAAM,GAAG,MAAM;AAAA;;AACxB,QAAM,CAACC,KAAD,EAAOC,QAAP,IAAiBT,QAAQ,CAAC;AAACU,IAAAA,IAAI,EAAC,GAAN;AAAUC,IAAAA,KAAK,EAAC;AAAhB,GAAD,CAA/B;;AACA,QAAMC,UAAU,GAAEC,KAAD,IAAS;AACtBC,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACH,GAFD;;AAGH,sBACI,QAAC,GAAD;AAAK,IAAA,KAAK,EAAC,QAAX;AAAoB,IAAA,OAAO,EAAC,SAA5B;AAAsC,IAAA,MAAM,EAAC,OAA7C;AAAA,2BACI,QAAC,GAAD;AAAK,MAAA,MAAM,GAAE,OAAM,MAAR,CAAX;AAA2B,MAAA,KAAK,EAAC,QAAjC;AAAA,8BACA,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADA,eAEA,QAAC,IAAD;AACG,QAAA,KAAK,EAAEP,KADV;AAEG,QAAA,QAAQ,EAAEQ,SAAS,IAAIP,QAAQ,CAACO,SAAD,CAFlC;AAGG,QAAA,QAAQ,EAAE,CAAC;AAAER,UAAAA,KAAK,EAAEQ;AAAT,SAAD,KAA0BF,OAAO,CAACC,GAAR,CAAYC,SAAZ,CAHvC;AAAA,gCAMG,QAAC,SAAD;AAAW,UAAA,KAAK,EAAC,OAAjB;AAAyB,UAAA,IAAI,EAAC,OAA9B;AAAsC,UAAA,QAAQ,MAA9C;AAAA,iCACE,QAAC,SAAD;AAAW,YAAA,IAAI,EAAC,OAAhB;AAAwB,YAAA,IAAI,EAAC;AAA7B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBANH,eASG,QAAC,SAAD;AAAW,UAAA,KAAK,EAAC,UAAjB;AAA4B,UAAA,IAAI,EAAC,MAAjC;AAAwC,UAAA,QAAQ,MAAhD;AAAA,iCACE,QAAC,SAAD;AAAW,YAAA,IAAI,EAAC,MAAhB;AAAuB,YAAA,IAAI,EAAC;AAA5B;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,gBATH,eAmBG,QAAC,GAAD;AAAK,UAAA,SAAS,EAAC,KAAf;AAAqB,UAAA,OAAO,EAAC,SAA7B;AAAuC,UAAA,MAAM,EAAE;AAAEC,YAAAA,GAAG,EAAE;AAAP,WAA/C;AAAA,kCACE,QAAC,MAAD;AAAQ,YAAA,IAAI,EAAC,OAAb;AAAqB,YAAA,KAAK,EAAC;AAA3B;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE,QAAC,MAAD;AAAQ,YAAA,IAAI,EAAC,QAAb;AAAsB,YAAA,KAAK,EAAC,QAA5B;AAAqC,YAAA,OAAO;AAA5C;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAnBH;AAAA;AAAA;AAAA;AAAA;AAAA,cAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAgCA,CArCM;;GAAMV,M;;KAAAA,M","sourcesContent":["import React, { useState } from 'react';\r\nimport { FormField, TextInput, Box, Button, Form, Heading } from 'grommet';\r\n\r\n\r\n\r\n\r\n\r\n\r\n// This example shows a way to perform validation across multiple fields.\r\nexport const ULogin = () => {\r\n    const [value,setValue]=useState({name:'a',email:'b'})\r\n    const HandleData=(event)=>{\r\n        console.log(\"reached\");\r\n    }\r\n return(\r\n     <Box align=\"center\" justify=\"between\" height=\"100vh\" >\r\n         <Box margin={\"top\",\"25vh\"} align=\"center\">\r\n         <Heading>Login</Heading>\r\n         <Form\r\n            value={value}\r\n            onChange={nextValue => setValue(nextValue)}\r\n            onSubmit={({ value: nextValue }) => console.log(nextValue)}\r\n          >\r\n            \r\n            <FormField label=\"Email\" name=\"email\" required>\r\n              <TextInput name=\"email\" type=\"email\" />\r\n            </FormField>\r\n            <FormField label=\"Password\" name=\"name\" required>\r\n              <TextInput name=\"name\" type=\"password\" />\r\n            </FormField>\r\n\r\n            {/* {message && (\r\n              <Box pad={{ horizontal: 'small' }}>\r\n                <Text color=\"status-error\">{message}</Text>\r\n              </Box>\r\n            )} */}\r\n\r\n            <Box direction=\"row\" justify=\"between\" margin={{ top: 'medium' }}>\r\n              <Button type=\"reset\" label=\"Reset\" />\r\n              <Button type=\"submit\" label=\"Update\" primary />\r\n            </Box>\r\n          </Form>\r\n    </Box>\r\n    </Box>\r\n );\r\n  \r\n};\r\n"]},"metadata":{},"sourceType":"module"}