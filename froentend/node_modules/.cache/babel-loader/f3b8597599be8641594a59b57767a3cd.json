{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar tslib = require('tslib');\n\nvar React = require('react');\n\nvar grommet = require('grommet');\n\nvar object = require('grommet/utils/object');\n\nvar colors$1 = require('grommet/utils/colors');\n\nvar colors = require('./colors.js');\n\nvar reactChartjs2 = require('react-chartjs-2');\n\nfunction _interopDefaultLegacy(e) {\n  return e && typeof e === 'object' && 'default' in e ? e : {\n    'default': e\n  };\n}\n\nvar React__default = /*#__PURE__*/_interopDefaultLegacy(React);\n\nconst normalizedColor = (color, theme) => colors.colorForName(colors$1.normalizeColor(color, theme), theme);\n\nconst withChartTheme = (WrappedComponent, _a = {}) => {\n  var {\n    classOpacity = 0.6,\n    defaultScales = [{}]\n  } = _a,\n      other = tslib.__rest(_a, [\"classOpacity\", \"defaultScales\"]);\n\n  return ({\n    options,\n    data\n  }) => React__default['default'].createElement(grommet.ThemeContext.Consumer, null, theme => {\n    const textColor = normalizedColor('text', theme);\n    const axisColors = {\n      ticks: {\n        fontColor: textColor\n      },\n      gridLines: {\n        color: normalizedColor('border', theme)\n      },\n      scaleLabel: {\n        fontColor: textColor\n      }\n    };\n    const defaultOptions = {\n      maintainAspectRatio: false,\n      title: {\n        fontColor: textColor\n      },\n      legend: {\n        labels: {\n          fontColor: textColor\n        }\n      },\n      scales: {}\n    };\n    const themedOptions = object.deepMerge(defaultOptions, options);\n    themedOptions.scales.xAxes = themedOptions.scales.xAxes || defaultScales;\n    themedOptions.scales.yAxes = themedOptions.scales.yAxes || defaultScales;\n    themedOptions.scales.xAxes = themedOptions.scales.xAxes.map(x => object.deepMerge(axisColors, x));\n    themedOptions.scales.yAxes = themedOptions.scales.yAxes.map(y => object.deepMerge(axisColors, y));\n    let datasets;\n\n    if (data && Array.isArray(data.datasets)) {\n      datasets = data.datasets.map((dataset, i) => {\n        const {\n          backgroundColor,\n          borderColor,\n          color\n        } = dataset,\n              rest = tslib.__rest(dataset, [\"backgroundColor\", \"borderColor\", \"color\"]);\n\n        let newOpts;\n\n        const themeColors = (index, itemOpacity) => {\n          const lineColor = borderColor || color || colors.colorFromIndex(index);\n          const lineColors = Array.isArray(lineColor) ? lineColor.map(c => normalizedColor(c, theme)) : normalizedColor(lineColor, theme);\n          const fillColor = backgroundColor || lineColor;\n          const opacity = itemOpacity || dataset.opacity || options && options.opacity || classOpacity;\n          const fillColors = Array.isArray(fillColor) ? fillColor.map(c => colors$1.getRGBA(normalizedColor(c, theme), opacity)) : colors$1.getRGBA(normalizedColor(fillColor, theme), opacity);\n          return {\n            backgroundColor: fillColors,\n            borderColor: lineColors\n          };\n        };\n\n        if (options && options.themedData && dataset.data) {\n          newOpts = {\n            backgroundColor: [],\n            borderColor: []\n          };\n          dataset.data.forEach((dataRow, rIndex) => {\n            const colors = themeColors(rIndex, dataRow.opacity);\n            newOpts.backgroundColor.push(colors.backgroundColor);\n            newOpts.borderColor.push(colors.borderColor);\n          });\n        } else {\n          newOpts = themeColors(i);\n        }\n\n        return Object.assign(Object.assign(Object.assign({}, newOpts), other), rest);\n      });\n    }\n\n    return React__default['default'].createElement(WrappedComponent, {\n      options: themedOptions,\n      data: Object.assign(Object.assign({}, data), {\n        datasets\n      })\n    });\n  });\n};\n/**\r\n * Bar chart wrapper to chart.js Bar with grommet theming<br/>\r\n * For all standard charting options, consult the chart.js docs<br/>\r\n * `import { BarChart } from 'grommet-controls/chartjs';`<br/>\r\n * `<BarChart data={...} options={...} />`<br/>\r\n */\n\n\nconst BarChart = withChartTheme(reactChartjs2.Bar, {\n  borderWidth: 3\n});\n/** Doughnut chart wrapper to chart.js Doughnut with grommet theming,br/>\r\n * For all standard charting options, consult the chart.js docs<br/>\r\n * `import { DoughnutChart } from 'grommet-controls/chartjs';`<br/>\r\n * `<DoughnutChart data={...} options={...} />`<br/>\r\n */\n\nconst DoughnutChart = withChartTheme(reactChartjs2.Doughnut, {\n  classOpacity: 1,\n  defaultScales: []\n});\n/** HorizontalBar chart wrapper to chart.js HorizontalBar with grommet theming<br/>\r\n * For all standard charting options, consult the chart.js docs<br/>\r\n * `import { HorizontalBarChart } from 'grommet-controls/chartjs';`<br/>\r\n * `<HorizontalBarChart data={...} options={...} />`<br/>\r\n */\n\nconst HorizontalBarChart = withChartTheme(reactChartjs2.HorizontalBar, {\n  borderWidth: 3\n});\n/** Line chart wrapper to chart.js Line with grommet theming<br/>\r\n * For all standard charting options, consult the chart.js docs<br/>\r\n * `import { LineChart } from 'grommet-controls/chartjs';`<br/>\r\n * `<LineChart data={...} options={...} />`<br/>\r\n */\n\nconst LineChart = withChartTheme(reactChartjs2.Line);\n/** Pie chart wrapper to chart.js Pie with grommet theming<br/>\r\n * For all standard charting options, consult the chart.js docs<br/>\r\n * `import { PieChart } from 'grommet-controls/chartjs';`<br/>\r\n * `<PieChart data={...} options={...} />`<br/>\r\n */\n\nconst PieChart = withChartTheme(reactChartjs2.Pie, {\n  classOpacity: 1,\n  defaultScales: []\n});\n/** Polar chart wrapper to chart.js Polar with grommet theming<br/>\r\n * For all standard charting options, consult the chart.js docs<br/>\r\n * `import { PolarChart } from 'grommet-controls/chartjs';`<br/>\r\n * `<PolarChart data={...} options={...} />`<br/>\r\n */\n\nconst PolarChart = withChartTheme(reactChartjs2.Polar, {\n  defaultScales: []\n});\n/** Radar chart wrapper to chart.js Radar with grommet theming<br/>\r\n * For all standard charting options, consult the chart.js docs<br/>\r\n * `import { RadarChart } from 'grommet-controls/chartjs';`<br/>\r\n * `<RadarChart data={...} options={...} />`<br/>\r\n */\n\nconst RadarChart = withChartTheme(reactChartjs2.Radar, {\n  defaultScales: []\n});\n/** Scatter chart wrapper to chart.js Scatter with grommet theming<br/>\r\n * For all standard charting options, consult the chart.js docs<br/>\r\n * `import { ScatterChart } from 'grommet-controls/chartjs';`<br/>\r\n * `<ScatterChart data={...} options={...} />`<br/>\r\n */\n\nconst ScatterChart = withChartTheme(reactChartjs2.Scatter);\nexports.BarChart = BarChart;\nexports.DoughnutChart = DoughnutChart;\nexports.HorizontalBarChart = HorizontalBarChart;\nexports.LineChart = LineChart;\nexports.PieChart = PieChart;\nexports.PolarChart = PolarChart;\nexports.RadarChart = RadarChart;\nexports.ScatterChart = ScatterChart;\nexports.withChartTheme = withChartTheme;","map":{"version":3,"sources":["D:/project/node_modules/grommet-controls/dist/index2.js"],"names":["Object","defineProperty","exports","value","tslib","require","React","grommet","object","colors$1","colors","reactChartjs2","_interopDefaultLegacy","e","React__default","normalizedColor","color","theme","colorForName","normalizeColor","withChartTheme","WrappedComponent","_a","classOpacity","defaultScales","other","__rest","options","data","createElement","ThemeContext","Consumer","textColor","axisColors","ticks","fontColor","gridLines","scaleLabel","defaultOptions","maintainAspectRatio","title","legend","labels","scales","themedOptions","deepMerge","xAxes","yAxes","map","x","y","datasets","Array","isArray","dataset","i","backgroundColor","borderColor","rest","newOpts","themeColors","index","itemOpacity","lineColor","colorFromIndex","lineColors","c","fillColor","opacity","fillColors","getRGBA","themedData","forEach","dataRow","rIndex","push","assign","BarChart","Bar","borderWidth","DoughnutChart","Doughnut","HorizontalBarChart","HorizontalBar","LineChart","Line","PieChart","Pie","PolarChart","Polar","RadarChart","Radar","ScatterChart","Scatter"],"mappings":"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","sourcesContent":["'use strict';\r\n\r\nObject.defineProperty(exports, '__esModule', { value: true });\r\n\r\nvar tslib = require('tslib');\r\nvar React = require('react');\r\nvar grommet = require('grommet');\r\nvar object = require('grommet/utils/object');\r\nvar colors$1 = require('grommet/utils/colors');\r\nvar colors = require('./colors.js');\r\nvar reactChartjs2 = require('react-chartjs-2');\r\n\r\nfunction _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }\r\n\r\nvar React__default = /*#__PURE__*/_interopDefaultLegacy(React);\r\n\r\nconst normalizedColor = (color, theme) => colors.colorForName(colors$1.normalizeColor(color, theme), theme);\r\nconst withChartTheme = (WrappedComponent, _a = {}) => {\r\n    var { classOpacity = 0.6, defaultScales = [{}] } = _a, other = tslib.__rest(_a, [\"classOpacity\", \"defaultScales\"]);\r\n    return ({ options, data }) => (React__default['default'].createElement(grommet.ThemeContext.Consumer, null, theme => {\r\n        const textColor = normalizedColor('text', theme);\r\n        const axisColors = {\r\n            ticks: {\r\n                fontColor: textColor,\r\n            },\r\n            gridLines: {\r\n                color: normalizedColor('border', theme),\r\n            },\r\n            scaleLabel: {\r\n                fontColor: textColor,\r\n            },\r\n        };\r\n        const defaultOptions = {\r\n            maintainAspectRatio: false,\r\n            title: {\r\n                fontColor: textColor,\r\n            },\r\n            legend: {\r\n                labels: {\r\n                    fontColor: textColor,\r\n                },\r\n            },\r\n            scales: {},\r\n        };\r\n        const themedOptions = object.deepMerge(defaultOptions, options);\r\n        themedOptions.scales.xAxes = themedOptions.scales.xAxes || defaultScales;\r\n        themedOptions.scales.yAxes = themedOptions.scales.yAxes || defaultScales;\r\n        themedOptions.scales.xAxes = themedOptions.scales.xAxes.map(x => object.deepMerge(axisColors, x));\r\n        themedOptions.scales.yAxes = themedOptions.scales.yAxes.map(y => object.deepMerge(axisColors, y));\r\n        let datasets;\r\n        if (data && Array.isArray(data.datasets)) {\r\n            datasets = data.datasets.map((dataset, i) => {\r\n                const { backgroundColor, borderColor, color } = dataset, rest = tslib.__rest(dataset, [\"backgroundColor\", \"borderColor\", \"color\"]);\r\n                let newOpts;\r\n                const themeColors = (index, itemOpacity) => {\r\n                    const lineColor = borderColor || color || colors.colorFromIndex(index);\r\n                    const lineColors = Array.isArray(lineColor)\r\n                        ? lineColor.map(c => normalizedColor(c, theme))\r\n                        : normalizedColor(lineColor, theme);\r\n                    const fillColor = backgroundColor || lineColor;\r\n                    const opacity = itemOpacity ||\r\n                        dataset.opacity ||\r\n                        (options && options.opacity) ||\r\n                        classOpacity;\r\n                    const fillColors = Array.isArray(fillColor)\r\n                        ? fillColor.map(c => colors$1.getRGBA(normalizedColor(c, theme), opacity))\r\n                        : colors$1.getRGBA(normalizedColor(fillColor, theme), opacity);\r\n                    return {\r\n                        backgroundColor: fillColors,\r\n                        borderColor: lineColors,\r\n                    };\r\n                };\r\n                if (options && options.themedData && dataset.data) {\r\n                    newOpts = { backgroundColor: [], borderColor: [] };\r\n                    dataset.data.forEach((dataRow, rIndex) => {\r\n                        const colors = themeColors(rIndex, dataRow.opacity);\r\n                        newOpts.backgroundColor.push(colors.backgroundColor);\r\n                        newOpts.borderColor.push(colors.borderColor);\r\n                    });\r\n                }\r\n                else {\r\n                    newOpts = themeColors(i);\r\n                }\r\n                return Object.assign(Object.assign(Object.assign({}, newOpts), other), rest);\r\n            });\r\n        }\r\n        return (React__default['default'].createElement(WrappedComponent, { options: themedOptions, data: Object.assign(Object.assign({}, data), { datasets }) }));\r\n    }));\r\n};\r\n\r\n/**\r\n * Bar chart wrapper to chart.js Bar with grommet theming<br/>\r\n * For all standard charting options, consult the chart.js docs<br/>\r\n * `import { BarChart } from 'grommet-controls/chartjs';`<br/>\r\n * `<BarChart data={...} options={...} />`<br/>\r\n */\r\nconst BarChart = withChartTheme(reactChartjs2.Bar, { borderWidth: 3 });\r\n\r\n/** Doughnut chart wrapper to chart.js Doughnut with grommet theming,br/>\r\n * For all standard charting options, consult the chart.js docs<br/>\r\n * `import { DoughnutChart } from 'grommet-controls/chartjs';`<br/>\r\n * `<DoughnutChart data={...} options={...} />`<br/>\r\n */\r\nconst DoughnutChart = withChartTheme(reactChartjs2.Doughnut, {\r\n    classOpacity: 1,\r\n    defaultScales: [],\r\n});\r\n\r\n/** HorizontalBar chart wrapper to chart.js HorizontalBar with grommet theming<br/>\r\n * For all standard charting options, consult the chart.js docs<br/>\r\n * `import { HorizontalBarChart } from 'grommet-controls/chartjs';`<br/>\r\n * `<HorizontalBarChart data={...} options={...} />`<br/>\r\n */\r\nconst HorizontalBarChart = withChartTheme(reactChartjs2.HorizontalBar, { borderWidth: 3 });\r\n\r\n/** Line chart wrapper to chart.js Line with grommet theming<br/>\r\n * For all standard charting options, consult the chart.js docs<br/>\r\n * `import { LineChart } from 'grommet-controls/chartjs';`<br/>\r\n * `<LineChart data={...} options={...} />`<br/>\r\n */\r\nconst LineChart = withChartTheme(reactChartjs2.Line);\r\n\r\n/** Pie chart wrapper to chart.js Pie with grommet theming<br/>\r\n * For all standard charting options, consult the chart.js docs<br/>\r\n * `import { PieChart } from 'grommet-controls/chartjs';`<br/>\r\n * `<PieChart data={...} options={...} />`<br/>\r\n */\r\nconst PieChart = withChartTheme(reactChartjs2.Pie, { classOpacity: 1, defaultScales: [] });\r\n\r\n/** Polar chart wrapper to chart.js Polar with grommet theming<br/>\r\n * For all standard charting options, consult the chart.js docs<br/>\r\n * `import { PolarChart } from 'grommet-controls/chartjs';`<br/>\r\n * `<PolarChart data={...} options={...} />`<br/>\r\n */\r\nconst PolarChart = withChartTheme(reactChartjs2.Polar, { defaultScales: [] });\r\n\r\n/** Radar chart wrapper to chart.js Radar with grommet theming<br/>\r\n * For all standard charting options, consult the chart.js docs<br/>\r\n * `import { RadarChart } from 'grommet-controls/chartjs';`<br/>\r\n * `<RadarChart data={...} options={...} />`<br/>\r\n */\r\nconst RadarChart = withChartTheme(reactChartjs2.Radar, { defaultScales: [] });\r\n\r\n/** Scatter chart wrapper to chart.js Scatter with grommet theming<br/>\r\n * For all standard charting options, consult the chart.js docs<br/>\r\n * `import { ScatterChart } from 'grommet-controls/chartjs';`<br/>\r\n * `<ScatterChart data={...} options={...} />`<br/>\r\n */\r\nconst ScatterChart = withChartTheme(reactChartjs2.Scatter);\r\n\r\nexports.BarChart = BarChart;\r\nexports.DoughnutChart = DoughnutChart;\r\nexports.HorizontalBarChart = HorizontalBarChart;\r\nexports.LineChart = LineChart;\r\nexports.PieChart = PieChart;\r\nexports.PolarChart = PolarChart;\r\nexports.RadarChart = RadarChart;\r\nexports.ScatterChart = ScatterChart;\r\nexports.withChartTheme = withChartTheme;\r\n"]},"metadata":{},"sourceType":"script"}